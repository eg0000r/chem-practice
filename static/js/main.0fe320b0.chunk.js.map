{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","ReviewTable","numbers","formula","name","getFormula","i","n","f","out","length","includes","sub","this","props","visible","push","dangerouslySetInnerHTML","__html","toLowerCase","Component","Card","onClick","e","setState","answer","target","value","toUpperCase","state","index","random","Math","floor","score","console","log","onCheck","checked","onReview","review","className","type","onChange","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0fe320b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass ReviewTable extends Component {\n  numbers = ['1', '2', '3', '4', '7'];\n  formula = ['NH4', 'NO2', 'NO3', 'SO3', 'SO4', 'HSO4', 'OH', 'PO4', 'HPO4', 'H2PO4', 'CO3', 'HCO3',\n    'ClO4', 'ClO3', 'ClO2', 'ClO', 'C2H3O2', 'Cr2O7', 'CrO4', 'CN'];\n  name = ['AMMONIUM', 'NITRITE', 'NITRATE', 'SULFITE', 'SULFATE', 'BISULFATE', 'HYDROXIDE', 'PHOSPHATE', 'HYDROGEN PHOSPHATE',\n    'DIHYDROGEN PHOSPHATE', 'CARBONATE', 'BICARBONATE', 'PERCHLORATE', 'CHLORATE', 'CHLORITE', 'HYPOCHLORITE',\n    'ACETATE', 'DICHROMATE', 'CHROMATE', 'CYANIDE'];\n  getFormula = (i) => {\n    let f = this.formula[i];\n    let out = '';\n    let n;\n    for (n = 0; n < f.length; n ++) {\n      if (this.numbers.includes(f[n])) {\n        out += f[n].sub();\n      } else {\n        out += f[n];\n      }\n    }\n    return out;\n  };\n  render() {\n    if (this.props.visible) {\n      let out = [];\n      let i;\n      for (i = 0; i < this.formula.length; i ++) {\n        out.push(\n            <tr>\n              <td dangerouslySetInnerHTML={{__html: this.getFormula(i)}}/>\n              <td>{this.name[i].toLowerCase()}</td>\n            </tr>\n        );\n      }\n      return (\n          <table>\n            {out}\n          </table>\n      );\n    }\n    return null;\n  }\n}\n\nclass Card extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      index: 0,\n      answer: '',\n      random: false,\n      review: false,\n    }\n  }\n  numbers = ['1', '2', '3', '4'];\n  formula = ['NH4', 'NO2', 'NO3', 'SO3', 'SO4', 'HSO4', 'OH', 'PO4', 'HPO4', 'H2PO4', 'CO3', 'HCO3',\n    'ClO4', 'ClO3', 'ClO2', 'ClO', 'C2H3O2', 'Cr2O7', 'CrO4', 'CN'];\n  getFormula = (i) => {\n    let f = this.formula[i];\n    let out = '';\n    let n;\n    for (n = 0; n < f.length; n ++) {\n      if (this.numbers.includes(f[n])) {\n        out += f[n].sub();\n      } else {\n        out += f[n];\n      }\n    }\n    return out;\n  };\n  name = ['AMMONIUM', 'NITRITE', 'NITRATE', 'SULFITE', 'SULFATE', 'BISULFATE', 'HYDROXIDE', 'PHOSPHATE', 'HYDROGEN PHOSPHATE',\n  'DIHYDROGEN PHOSPHATE', 'CARBONATE', 'BICARBONATE', 'PERCHLORATE', 'CHLORATE', 'CHLORITE', 'HYPOCHLORITE',\n    'ACETATE', 'DICHROMATE', 'CHROMATE', 'CYANIDE'];\n  onClick = (e) => {\n    this.setState({answer: e.target.value.toUpperCase()});\n    if (e.target.value.toUpperCase() === this.name[this.state.index]) {\n      if (this.state.random) {\n        this.setState({index: Math.floor(Math.random() * this.formula.length), score: this.state.score + 1});\n      } else {\n        if (this.state.index === this.name.length - 1) {\n          this.setState({index: 0});\n        } else {\n          this.setState({index: this.state.index + 1});\n        }\n        this.setState({score: this.state.score + 1});\n      }\n      console.log('CORRECT!!!');\n    }\n  };\n  onCheck = (e) => {\n    console.log(e.target.checked);\n    this.setState({random: e.target.checked});\n  };\n  onReview = (e) => {\n    this.setState({review: !this.state.review});\n  };\n  render() {\n    return(\n        <div>\n          <div className={'card'}>\n            <input type={'checkbox'} onChange={this.onCheck}/>\n            <label>Random order</label>\n            <h3>Score: {this.state.score}</h3>\n            <h1 dangerouslySetInnerHTML={{__html: this.getFormula(this.state.index)}}/>\n            <label>Name of ion: </label>\n            <input disabled={this.state.review} onChange={this.onClick}/>\n            <h2>{this.state.answer}</h2>\n            <button onClick={this.onReview}>Review</button>\n          </div>\n          <br/>\n          <ReviewTable visible={this.state.review}/>\n        </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className={'main'}>\n      <Card/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}